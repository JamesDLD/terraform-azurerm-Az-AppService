#Multi-stage YAML pipeline demo.
name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

trigger:
  batch: true # when a build is running, the system waits until the build is completed
  branches:
    include:
      - master
      - feature/*
      - release/*

schedules:
  - cron: "45 8 * * 4"
    branches:
      include:
        - master
    displayName: Weekly Thursday 8h45 am UTC build
    always: true

variables:
  - name: vmImageName
    value: "ubuntu-latest"
  - name: terraform_version
    value: "0.12.12"
  - name: artifact_name
    value: Az-AppService
  - name: backend_and_main_secret_file_id
    value: "backend-main-jdld-1.json"

resources:
  repositories:
    - repository: Yaml_Templates # identifier (A-Z, a-z, 0-9, and underscore)
      type: github
      endpoint: JamesDLD # name of the service connection to use (for non-Azure Repos types)
      name: JamesDLD/terraform
      #ref: refs/tags/0.0.1  # ref name to use, defaults to 'refs/heads/master'

stages:
  - stage: Build
    jobs:
      - job: Terraform_Plan
        displayName: Terraform Plan - Publish a package if Infrastructure changes are identified
        continueOnError: false
        pool:
          vmImage: $(vmImageName)
        steps:
          - checkout: self # self represents the repo where the initial Pipelines YAML file was found
            displayName: "Checking out source code"
            clean: true # whether to fetch clean each time
            persistCredentials: true # set to 'true' to leave the OAuth token in the Git config after the initial fetch

          - task: DownloadSecureFile@1
            displayName: Download secure file $(backend_and_main_secret_file_id)
            inputs:
              secureFile: $(backend_and_main_secret_file_id)

          - template: pipeline/terraform.yml@Yaml_Templates
            parameters:
              version: $(terraform_version)
              path: "./examples/docker_python_hello_world"
              package_name: "docker_python_hello_world"
              terraform_init: true
              terraform_plan: true
              backend_secret_file_id: $(backend_and_main_secret_file_id)
              main_secret_file_id: $(backend_and_main_secret_file_id)

          - template: pipeline/terraform.yml@Yaml_Templates
            parameters:
              version: $(terraform_version)
              path: "./examples/wordpress_remote_mysql"
              package_name: "wordpress_remote_mysql"
              terraform_init: true
              terraform_plan: true
              backend_secret_file_id: $(backend_and_main_secret_file_id)
              main_secret_file_id: $(backend_and_main_secret_file_id)

          - publish: "./ArtifactPublishLocation" # Local path to include in the Artifact
            artifact: "$(artifact_name)"

  - stage: Deploy
    dependsOn: Build
    jobs:
      # track deployments on the environment
      - deployment: Terraform_Apply
        displayName: Terraform Apply - Resources creation
        pool:
          vmImage: $(vmImageName)
        environment: "Terraform_Apply"
        strategy:
          # default deployment strategy
          runOnce:
            deploy:
              steps:
                - template: pipeline/terraform.yml@Yaml_Templates
                  parameters:
                    version: $(terraform_version)
                    package_name: "docker_python_hello_world"
                    terraform_apply: true
                    artifact_path: $(Pipeline.Workspace)/$(artifact_name)

                - template: pipeline/terraform.yml@Yaml_Templates
                  parameters:
                    version: $(terraform_version)
                    package_name: "wordpress_remote_mysql"
                    terraform_apply: true
                    artifact_path: $(Pipeline.Workspace)/$(artifact_name)

                - bash: |
                    #Variable
                    backend_secret_file_id_path="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)"
                    rg_infra_name="infr-jdld-noprd-rg1"
                    sa_name="infrsdbx1vpcjdld1"
                    rg_app_name="apps-jdld-sand1-rg1"
                    app_service_name="wp-sdbxwordpress-apps1"
                    container_name="bin"
                    blob_name="wordpress_db_ssl_conn_via_env_var.zip"
                    client_id=$(cat $backend_secret_file_id_path | jq -r  '.client_id')
                    client_secret=$(cat $backend_secret_file_id_path | jq -r  '.client_secret')
                    tenant_id=$(cat $backend_secret_file_id_path | jq -r  '.tenant_id')
                    subscription_id=$(cat $backend_secret_file_id_path | jq -r  '.subscription_id')

                    #Action
                    echo "Connecting to the Azure tenant id"
                    login=$(az login --service-principal -u $client_id -p $client_secret --tenant $tenant_id)

                    echo "Selecting the Azure subscription"
                    az account set --subscription $subscription_id

                    echo "Authenticate to the storage account"
                    json=$(az storage account keys list --account-name $sa_name --resource-group $rg_infra_name)
                    export AZURE_STORAGE_ACCOUNT=$sa_name
                    export AZURE_STORAGE_KEY=$(echo $json | jq -r '.[0].value')

                    echo "Downloading the app service package file..."
                    az storage blob download --container-name $container_name --name $blob_name --file ./$blob_name 

                    echo "Deploy ZIP file with Azure CLI..."
                    az webapp deployment source config-zip --resource-group $rg_app_name --name $app_service_name --src ./$blob_name 
                displayName: wordpress_remote_mysql - Deploying wordpress through the Zip Deploy method

  - stage: Deliver
    dependsOn: Deploy
    jobs:
      # track deployments on the environment
      - deployment: Terraform_Destroy
        displayName: Terraform Destroy - Script ok, now deleting the resources
        pool:
          vmImage: $(vmImageName)
        environment: "Terraform_Destroy"
        strategy:
          # default deployment strategy
          runOnce:
            deploy:
              steps:
                - task: DownloadSecureFile@1
                  displayName: Download secure file $(backend_and_main_secret_file_id)
                  inputs:
                    secureFile: $(backend_and_main_secret_file_id)

                - template: pipeline/terraform.yml@Yaml_Templates
                  parameters:
                    version: $(terraform_version)
                    package_name: "docker_python_hello_world"
                    terraform_destroy: true
                    main_secret_file_id: $(backend_and_main_secret_file_id)
                    artifact_path: $(Pipeline.Workspace)/$(artifact_name)

                # - template: pipeline/terraform.yml@Yaml_Templates
                #   parameters:
                #     version: $(terraform_version)
                #     package_name: "wordpress_remote_mysql"
                #     terraform_destroy: true
                #     main_secret_file_id: $(backend_and_main_secret_file_id)
                #     artifact_path: $(Pipeline.Workspace)/$(artifact_name)
